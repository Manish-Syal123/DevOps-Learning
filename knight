//N => rows & M => columns
public class Solution{
    public int knight(int N,int M,int x1,int y1,int x2,int y2){
        int[] dx={-1,-2,-1,-2,1,2,1,2};
        int[] dy={-2,-1,2,1,-2,-1,2,1};
        boolean[][] isvisited = new boolean[N+1][M+1];
        Queue<coordinate> q=new LinkedList<coordinate>();
        q.add(new coordinate(x1,y1));
        visited[x1][y1]=true;
        int movecount=0;

        while(!q.isEmpty()){
            int currqsize=q.size();
            for(int count=0;count<currqsize;count++){
                coordinate currpos=q.remove();
                if(currpos.x==x2 && currpos.y==y2){
                    return movecount;
                }
                //otherwise a cordinate can make 8 moves or can go in 8 further directions.
                for(int i=0;i<8;i++){
                    if(isvalid(currpos.x+dx[i],currpos.y+dy[i],N,M) && isvisited[currpos.x+dx[i]][currpos.y+dy[i]]==false){
                        q.add(new coordinate(currpos.x+dx[i],currpos.y+dy[i]))
                        isvisited[currpos.x+dx[i][currpos.y+dy[i]]=true;
                    }
                }
            }
            movecount++;
        }
        return -1;
    }
    private boolean isvalid(int x,int y,int N,int M){
        if(x<=0 || y<=0 || x>N || y>M)
           return false;
        return true;
    }
    class coordinate{
        int x;
        int y;
        coordinate(int x,int y){
            this.x=x;
            this.y=y;
        }
    }
}